name: azure-dev

on:
  workflow_dispatch:
    inputs:
      cleanup-resources:
        description: 'Clean up resources after deployment'
        required: false
        default: true
        type: boolean
  pull_request:
    branches: 
      - main
    paths:
      - '.github/workflows/azure-dev.yml'
      - 'hooks/**'
      - 'infra/**'
      - 'src/**'
      - 'tests/IntegrationTests/**'
      - 'azure.yaml'
      - 'bicepconfig.json'

permissions:
  id-token: write # Required to fetch an OIDC token for Azure authentication
  contents: read  # Required to checkout code if needed

defaults:
  run:
    shell: pwsh # Use PowerShell Core for all scripts (the azd hooks are written in PowerShell)

env:
  # Add a unique suffix to the environment name for pull requests to avoid name conflicts
  AZURE_ENV_NAME: ${{ github.event.pull_request.number && format('{0}-pr{1}', vars.AZURE_ENV_NAME, github.event.pull_request.number) || vars.AZURE_ENV_NAME }}
  AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID || vars.AZURE_SUBSCRIPTION_ID }}

jobs:

  # ------------------------------------------------------------
  # Build, Verify and Package
  # ------------------------------------------------------------

  build-verify-package:
    name: Build, Verify and Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup azd
      uses: Azure/setup-azd@v2

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    # This template uses a workaround to deploy the Logic App workflow, which requires the npm CLI.
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'latest'

    # Ensure the azd environment is created before running subsequent azd commands.
    # This guarantees that any configured hooks are executed as expected.
    # See https://github.com/Azure/azure-dev/issues/3920 for more details.
    - name: Create azd env
      run: azd env new $env:AZURE_ENV_NAME

    - name: Bicep Lint
      run: |
        az bicep lint --file ./infra/main.bicep

    - name: Create artifacts folder
      run: |
        mkdir -p ./artifacts

    - name: Package Function App
      run: |
        azd package functionApp --output-path ./artifacts/functionapp-package.zip --no-prompt

    - name: Package Logic App
      run: |
        azd package logicApp --output-path ./artifacts/logicapp-package.zip --no-prompt

    - name: Build Integration Tests
      run: |
        dotnet build ./tests/IntegrationTests/IntegrationTests.csproj --configuration Release --output ./artifacts/integration-tests

    - name: Upload Function App Package
      uses: actions/upload-artifact@v4
      with:
        name: functionapp-package
        path: ./artifacts/functionapp-package.zip
        retention-days: 1

    - name: Upload Logic App Package
      uses: actions/upload-artifact@v4
      with:
        name: logicapp-package
        path: ./artifacts/logicapp-package.zip
        retention-days: 1

    - name: Upload Integration Tests Package
      uses: actions/upload-artifact@v4
      with:
        name: integration-tests-package
        path: ./artifacts/integration-tests/
        retention-days: 1


  # ------------------------------------------------------------
  # Deploy to Azure
  # ------------------------------------------------------------

  deploy:
    name: Deploy to Azure
    needs: build-verify-package
    runs-on: ubuntu-latest
    outputs:
      azure-environment-id: ${{ steps.get-outputs.outputs.azure-environment-id }}
      azure-resource-group: ${{ steps.get-outputs.outputs.azure-resource-group }}
      azure-api-management-name: ${{ steps.get-outputs.outputs.azure-api-management-name }}
      azure-function-app-name: ${{ steps.get-outputs.outputs.azure-function-app-name }}
      azure-logic-app-name: ${{ steps.get-outputs.outputs.azure-logic-app-name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup azd
      uses: Azure/setup-azd@v2

    # Use Azure CLI authentication with azd commands so credentials are shared between azd commands and az (Azure CLI) commands used in hooks.
    - name: Configure azd to use Azure CLI Authentication
      run: |
        azd config set auth.useAzCliAuth "true"

    # Login to the Azure CLI with OpenID Connect (OIDC) using federated identity credentials.
    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID || vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID || vars.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID || vars.AZURE_SUBSCRIPTION_ID }}

    # Ensure the azd environment is created before running subsequent azd commands.
    # This guarantees that any configured hooks are executed as expected.
    # See https://github.com/Azure/azure-dev/issues/3920 for more details.
    - name: Create azd env
      run: azd env new $env:AZURE_ENV_NAME

    - name: Provision Infrastructure
      run: |
        azd provision --no-prompt

    - name: Download Function App Package
      uses: actions/download-artifact@v4
      with:
        name: functionapp-package
        path: ./artifacts

    - name: Deploy Function App
      run: |
        azd deploy functionApp --from-package ./artifacts/functionapp-package.zip --no-prompt

    - name: Download Logic App Package
      uses: actions/download-artifact@v4
      with:
        name: logicapp-package
        path: ./artifacts

    - name: Deploy Logic App
      run: |
        azd deploy logicApp --from-package ./artifacts/logicapp-package.zip --no-prompt

    # Extract relevant azd environment variables and make them available as job outputs for subsequent jobs.
    - name: Get Output Variables
      id: get-outputs
      run: |
        $azureEnvironmentId = azd env get-value "AZURE_ENV_ID"
        $resourceGroupName = azd env get-value "AZURE_RESOURCE_GROUP"
        $apiManagementName = azd env get-value "AZURE_API_MANAGEMENT_NAME"
        $functionAppName = azd env get-value "AZURE_FUNCTION_APP_NAME"
        $logicAppName = azd env get-value "AZURE_LOGIC_APP_NAME"
        
        echo "azure-environment-id=$azureEnvironmentId" >> $env:GITHUB_OUTPUT
        echo "azure-resource-group=$resourceGroupName" >> $env:GITHUB_OUTPUT
        echo "azure-api-management-name=$apiManagementName" >> $env:GITHUB_OUTPUT
        echo "azure-function-app-name=$functionAppName" >> $env:GITHUB_OUTPUT
        echo "azure-logic-app-name=$logicAppName" >> $env:GITHUB_OUTPUT


  # ------------------------------------------------------------
  # Execute Integration Tests
  # ------------------------------------------------------------

  integration-tests:
    name: Execute Integration Tests
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Download Integration Tests Package
      uses: actions/download-artifact@v4
      with:
        name: integration-tests-package
        path: ./artifacts/integration-tests

    # Login to the Azure CLI with OpenID Connect (OIDC) using federated identity credentials.
    # This is necessary for the integration test to retrieve the APIM subscription key from Key Vault.
    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID || vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID || vars.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID || vars.AZURE_SUBSCRIPTION_ID }}

    - name: Run Integration Tests
      run: |
        dotnet ./artifacts/integration-tests/IntegrationTests.dll --report-trx --results-directory ./artifacts/integration-tests/TestResults
      working-directory: ./
      env:
        # Pass the necessary deployed resource identifiers as environment variables so the integration tests can access them.
        AZURE_RESOURCE_GROUP: ${{ needs.deploy.outputs.azure-resource-group }}
        AZURE_API_MANAGEMENT_NAME: ${{ needs.deploy.outputs.azure-api-management-name }}
        AZURE_FUNCTION_APP_NAME: ${{ needs.deploy.outputs.azure-function-app-name }}
        AZURE_LOGIC_APP_NAME: ${{ needs.deploy.outputs.azure-logic-app-name }}

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: ./artifacts/integration-tests/TestResults/
        retention-days: 1


  # ------------------------------------------------------------
  # Clean Up Resources
  # ------------------------------------------------------------

  cleanup:
    name: Clean Up Resources
    needs: [ deploy, integration-tests ]
    if: ${{ success() && (github.event_name != 'workflow_dispatch' || github.event.inputs.cleanup-resources == 'true') }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup azd
      uses: Azure/setup-azd@v2

    # Use Azure CLI authentication with azd commands so credentials are shared between azd commands and az (Azure CLI) commands used in hooks.
    - name: Configure azd to use Azure CLI Authentication
      run: |
        azd config set auth.useAzCliAuth "true"

    # Login to the Azure CLI with OpenID Connect (OIDC) using federated identity credentials.
    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID || vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID || vars.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID || vars.AZURE_SUBSCRIPTION_ID }}

    # Ensure the azd environment is created before running subsequent azd commands.
    # This guarantees that any configured hooks are executed as expected.
    # See https://github.com/Azure/azure-dev/issues/3920 for more details.
    - name: Create azd env
      run: azd env new $env:AZURE_ENV_NAME

    # Clean up using the --purge flag to ensure all resources are permanently deleted, like API Management.
    - name: Cleanup Resources
      run: |
        azd down --purge --force --no-prompt
      env:
        # Pass the deployed resource identifiers as environment variables so azd hooks can access them
        # during cleanup operations (e.g., for custom resource deletion or additional cleanup tasks).
        AZURE_ENV_ID: ${{ needs.deploy.outputs.azure-environment-id }}
        AZURE_RESOURCE_GROUP: ${{ needs.deploy.outputs.azure-resource-group }}
